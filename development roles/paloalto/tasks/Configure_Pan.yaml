    - name: HTTPS management profile
      panos_management_profile:
        ip_address: "{{ pan_final_management_ip | ipmath(idx) }}"
        username: "{{ pan_username }}"
        password: "{{ pan_password }}"
        name: 'https_access'
        ping: true
        https: true
        ssh: true
        state: present
      loop: "{{ ubit }}"
      loop_control:
        index_var: idx
      register: https
      async: 30000
      poll: 0

    - name: Check sync status
      async_status:
        jid: "{{ https_item.ansible_job_id }}"
      loop: "{{ https.results }}"
      loop_control:
        loop_var: "https_item"
      register: async_poll_results
      until: async_poll_results.finished
      retries: 3000


    - name: create outside zone on a firewall
      panos_zone:
        ip_address: "{{ pan_final_management_ip | ipmath(idx) }}"
        username: "{{ pan_username }}"
        password: "{{ pan_password }}"
        zone: 'outside'
        mode: 'layer3'
        state: present
      loop: "{{ ubit }}"
      loop_control:
        index_var: idx
      register: outside_zone
      async: 30000
      poll: 0

    - name: Check sync status
      async_status:
        jid: "{{ outside_zone_item.ansible_job_id }}"
      loop: "{{ outside_zone.results }}"
      loop_control:
        loop_var: "outside_zone_item"
      register: async_poll_results
      until: async_poll_results.finished
      retries: 3000

    - name: ethernet1/1 as static in zone outside
      panos_interface:
        ip_address: "{{ pan_final_management_ip | ipmath(idx) }}"
        username: "{{ pan_username }}"
        password: "{{ pan_password }}"
        if_name: "ethernet1/1"
        mode: "layer3"
        ip: ["{{ pan_outside_ip | ipmath(idx) }}/20"]
        enable_dhcp: false
        zone_name: "outside"
        state: present
      loop: "{{ ubit }}"
      loop_control:
        index_var: idx
      register: eht1
      async: 30000
      poll: 0

    - name: Check sync status
      async_status:
        jid: "{{ eht1_item.ansible_job_id }}"
      loop: "{{ eht1.results }}"
      loop_control:
        loop_var: "eht1_item"
      register: async_poll_results
      until: async_poll_results.finished
      retries: 3000

    - name: create inside zone on a firewall
      panos_zone:
        ip_address: "{{ pan_final_management_ip | ipmath(idx) }}"
        username: "{{ pan_username }}"
        password: "{{ pan_password }}"
        zone: 'inside'
        mode: 'layer3'
        state: present
      loop: "{{ ubit }}"
      loop_control:
        index_var: idx
      register: in_zone
      async: 30000
      poll: 0

    - name: Check sync status
      async_status:
        jid: "{{ in_zone_item.ansible_job_id }}"
      loop: "{{ in_zone.results }}"
      loop_control:
        loop_var: "in_zone_item"
      register: async_poll_results
      until: async_poll_results.finished
      retries: 3000

    - name: ethernet1/2 as static in zone outside
      panos_interface:
        ip_address: "{{ pan_final_management_ip | ipmath(idx) }}"
        username: "{{ pan_username }}"
        password: "{{ pan_password }}"
        if_name: "ethernet1/2"
        mode: "layer3"
        ip: ["{{ gateway | ipmath(idx) }}/24"]
        enable_dhcp: false
        zone_name: "inside"
        management_profile: 'https_access'
        state: present
      loop: "{{ ubit }}"
      loop_control:
        index_var: idx
      register: eht2
      async: 30000
      poll: 0

    - name: Check sync status
      async_status:
        jid: "{{ eht2_item.ansible_job_id }}"
      loop: "{{ eht2.results }}"
      loop_control:
        loop_var: "eht2_item"
      register: async_poll_results
      until: async_poll_results.finished
      retries: 3000

    - name: Create Default route
      panos_static_route:
        ip_address: "{{ pan_final_management_ip | ipmath(idx) }}"
        username: "{{ pan_username }}"
        password: "{{ pan_password }}"
        name: Default-route
        destination: '0.0.0.0/0'
        nexthop: "{{ gretzky }}"
        interface: "ethernet1/1"
      loop: "{{ ubit }}"
      loop_control:
        index_var: idx
      register: default_route
      async: 30000
      poll: 0

#    - name: Check sync status
#      async_status:
#        jid: "{{ default_route_item.ansible_job_id }}"
#     loop: "{{ default_route.results }}"
#     loop_control:
#        loop_var: "default_route_item"
#     register: async_poll_results
#      until: async_poll_results.finished
#      retries: 3000

    - name: Check sync status
      async_status:
        jid: "{{ default_route_item.ansible_job_id }}"
      loop: "{{ default_route.results }}"
      loop_control:
        loop_var: "default_route_item"
      register: async_poll_results
      until: async_poll_results.finished
      retries: 3000

    - name: commit candidate config on firewall
      panos_commit:
        ip_address: "{{ pan_final_management_ip | ipmath(idx) }}"
        username: "{{ pan_username }}"
        password: "{{ pan_password }}"
      loop: "{{ ubit }}"
      loop_control:
        index_var: idx
      register: config
      async: 30000
      poll: 0

    - name: Check sync status
      async_status:
       jid: "{{ config_item.ansible_job_id }}"
      loop: "{{ config.results }}"
      loop_control:
        loop_var: "config_item"
      register: async_poll_results
      until: async_poll_results.finished
      retries: 3000

    - name: Create NAT rule for inside-to-outside
      panos_nat_rule:
        ip_address: "{{ pan_final_management_ip | ipmath(idx) }}"
        username: "{{ pan_username }}"
        password: "{{ pan_password }}"
        rule_name: "inside-to-outside-NAT"
        source_zone: ["inside"]
        destination_zone: "outside"
        snat_type: "dynamic-ip-and-port"
        snat_address_type: "interface-address"
        snat_interface: "ethernet1/1"
        snat_interface_address: "{{ pan_outside_ip | ipmath(idx) }}/20"
        state: present
      loop: "{{ ubit }}"
      loop_control:
        index_var: idx
      register: in_out
      async: 30000
      poll: 0

    - name: Check sync status
      async_status:
        jid: "{{ in_out_item.ansible_job_id }}"
      loop: "{{ in_out.results }}"
      loop_control:
        loop_var: "in_out_item"
      register: async_poll_results
      until: async_poll_results.finished
      retries: 3000

    - name: Allow All Rule
      panos_security_rule:
        ip_address: "{{ pan_final_management_ip | ipmath(idx) }}"
        username: "{{ pan_username }}"
        password: "{{ pan_password }}"
        rule_name: 'Allow All'
        action: 'allow'
        state: present
      loop: "{{ ubit }}"
      loop_control:
        index_var: idx
      register: allow_all
      async: 30000
      poll: 0

    - name: Check sync status
      async_status:
        jid: "{{ allow_all_item.ansible_job_id }}"
      loop: "{{ allow_all.results }}"
      loop_control:
        loop_var: "allow_all_item"
      register: async_poll_results
      until: async_poll_results.finished
      retries: 3000


#    - name: Request Shutdown
#      panos_op:
#        ip_address: "{{ pan_final_management_ip | ipmath(idx) }}"
#        username: "{{ pan_username }}"
#        password: "{{ pan_password }}"
#        cmd: 'request shutdown system'
#      loop: "{{ ubit }}"
#      loop_control:
#        index_var: idx
#      ignore_errors: yes









